/*
 * ¬© 2025 Darpan Adhikari. All rights reserved.
 *
 * This software is copyrighted and may not be copied,
 * sold, redistributed, or reused in part or full without explicit written permission.
 *
 * Any attempt to replicate or misuse this code without permission is strictly prohibited.
 */
const storageKey="hourCalculatorData";function getStorage(){return JSON.parse(localStorage.getItem(storageKey))||{};}if(!getStorage()[new Date().toISOString().slice(0,10).slice(0,7)]?.[ new Date().toISOString().slice(0,10)]){addDateEntry(new Date().toISOString().slice(0,10));}function saveStorage(data){localStorage.setItem(storageKey,JSON.stringify(data));}function addDateEntry(dateStr){const allData=getStorage();const monthKey=dateStr.slice(0,7);if(!allData[monthKey])allData[monthKey]={};if(!allData[monthKey][dateStr])allData[monthKey][dateStr]=[];saveStorage(allData);renderAll();}function saveTimeEntry(date,inTime,outTime){const allData=getStorage();const monthKey=date.slice(0,7);let inDate=new Date(`2000-01-01T${inTime}`);let outDate=new Date(`2000-01-01T${outTime}`);if(outDate<=inDate){outDate.setDate(outDate.getDate()+1);}const diff=(outDate-inDate)/ 60000;if(diff<=0)return;allData[monthKey][date].push({inTime,outTime});saveStorage(allData);renderAll();}function deleteTimeEntry(month,date,index){const data=getStorage();data[month][date].splice(index,1);if(data[month][date].length===0)delete data[month][date];if(Object.keys(data[month]).length===0)delete data[month];saveStorage(data);renderAll();}function deleteDay(month,date){document.getElementById("modalTitle").innerText="Delete Entry";document.getElementById("modalBody").innerHTML=`<p>Do you want to delete the entire<b>${date}</b>entry or just its start time?</p><div class="flex"><button class="delete" onclick="deleteWholeDay('${month}','${date}')">Delete Day</button><button class="secondary" onclick="deleteStartOnly('${date}')">Delete Start Time</button></div>`;document.getElementById("rangeModal").style.display="flex";}function deleteWholeDay(month,date){const data=getStorage();delete data[month][date];if(Object.keys(data[month]).length===0)delete data[month];localStorage.removeItem("ongoing_"+date);saveStorage(data);closeRangeModal();renderAll();}function deleteStartOnly(date){localStorage.removeItem("ongoing_"+date);closeRangeModal();renderAll();}function deleteMonth(month){const data=getStorage();if(data[month]){if(!confirm(`Are you sure you want to delete the month ${month}?`))return;}delete data[month];saveStorage(data);renderAll();}function renderAll(){const container=document.getElementById("dateContainer");container.innerHTML="";const data=getStorage();const today=new Date().toISOString().slice(0,10);let totalMinutes=0;saveStorage(data);Object.keys(data).sort().forEach((month)=>{let monthMinutes=0;const monthDiv=document.createElement("div");const select=document.getElementById("filterDate");if(![...select.options].some(opt=>opt.value===month)){const option=document.createElement("option");option.value=month;option.textContent=month;select.appendChild(option);}select.addEventListener("change",()=>{const target=document.getElementById(select.value);if(target)target.scrollIntoView({behavior:"smooth"});});monthDiv.className="month-group";monthDiv.innerHTML=`<div class='month-title' id="${month}">-----${month}-----<button class="delete" onclick="deleteMonth('${month}')">Delete Month</button></div>`;const grid=document.createElement("div");grid.className="date-grid";Object.keys(data[month]).sort().forEach((date)=>{let dateMinutes=0;const dateDiv=document.createElement("div");dateDiv.className="date-entry";dateDiv.setAttribute("data-date",date);const header=`<div class='date-header'><strong>${date}</strong><div class='btn-group'><button class="delete" onclick="deleteDay('${month}','${date}')">üóë</button></div></div>`;const timeEntries=document.createElement("div");timeEntries.className="time-entries";const ongoing=localStorage.getItem("ongoing_"+date);const inInput=document.createElement("input");const outInput=document.createElement("input");inInput.type="time";outInput.type="time";if(ongoing){const{inTime,timestamp}=JSON.parse(ongoing);inInput.value=inTime;const now=Date.now();if(now>timestamp){const live=document.createElement("div");live.className="live-timer";const updateTimer=()=>{const elapsed=Math.floor((Date.now()-timestamp)/ 60000);const h=String(Math.floor(elapsed / 60)).padStart(2,'0');const m=String(elapsed % 60).padStart(2,'0');live.textContent=`üü¢ ${h}:${m}`;};updateTimer();setInterval(updateTimer,60000);setTimeout(()=>{timeEntries.appendChild(live);},300);}}outInput.disabled=false;inInput.onchange=()=>{outInput.disabled=false;const timerKey="ongoing_"+date;const selectedTimestamp=new Date(`${date}T${inInput.value}`).getTime();localStorage.setItem(timerKey,JSON.stringify({inTime:inInput.value,timestamp:selectedTimestamp}));renderAll();};outInput.onchange=()=>{if(outInput.hasAttribute("data-set")&&!confirm("You already set this Out Time. Change it?")){outInput.value=outInput.getAttribute("data-set");return;}outInput.setAttribute("data-set",outInput.value);localStorage.removeItem("ongoing_"+date);saveTimeEntry(date,inInput.value,outInput.value);};const wrap=document.createElement("div");wrap.className="time-entry";wrap.appendChild(inInput);wrap.appendChild(outInput);timeEntries.appendChild(wrap);data[month][date].forEach((entry,i)=>{const{inTime,outTime}=entry;let inDate=new Date(`2000-01-01T${inTime}`);let outDate=new Date(`2000-01-01T${outTime}`);if(outDate<=inDate)outDate.setDate(outDate.getDate()+1);const diff=(outDate-inDate)/ 60000;if(diff>0){dateMinutes+=diff;monthMinutes+=diff;totalMinutes+=diff;}const timeEntry=document.createElement("div");timeEntry.className="time-entry";timeEntry.innerHTML=`<span>üïê${inTime}|üïî${outTime}|‚è± ${Math.floor(diff / 60)}.${diff % 60}h<button class="delete" onclick="deleteTimeEntry('${month}','${date}',${i})">√ó</button></span>`;timeEntries.appendChild(timeEntry);});const summary=document.createElement("div");summary.className="summary";summary.textContent=`Day Total:${Math.floor(dateMinutes / 60)}h ${dateMinutes % 60}m`;dateDiv.innerHTML=header;dateDiv.appendChild(timeEntries);dateDiv.appendChild(summary);grid.appendChild(dateDiv);});const monthSummary=document.createElement("div");monthSummary.className="summary";monthSummary.textContent=`Month Total:${Math.floor(monthMinutes / 60)}h ${monthMinutes % 60}m`;monthDiv.appendChild(grid);monthDiv.appendChild(monthSummary);container.appendChild(monthDiv);});document.getElementById("totalHours").innerText=`Total Hours:${Math.floor(totalMinutes / 60)}h ${totalMinutes % 60}m`;}function showRangeModal(){document.getElementById("modalTitle").innerText="Calculate Time Range";document.getElementById("modalBody").innerHTML=`<label>From:<input type="date" id="fromDate" /></label><label>To:<input type="date" id="toDate" /></label><label>Work Hour/Day:<input type="number" id="workHourInput" value="8" min="1" max="24" /></label><div class="flex"><label><input type="checkbox" id="weekendSaturday" style="accent-color:red;" checked />Saturday</label><label><input type="checkbox" id="weekendSunday" style="accent-color:red;" />Sunday</label></div><div class="flex"><button onclick="calculateRange()">Calculate</button><button class="secondary" id="showTableBtn" onclick="displayRangeTable()" style="display:none;">Show Table</button></div><div id="rangeResult" style="font-weight:600"></div>`;document.getElementById("rangeModal").style.display="flex";}function closeRangeModal(){document.getElementById("rangeModal").style.display="none";}let fromGlobal="";let toGlobal="";let csvContent="";let calculatedEntries=[];function calculateRange(){fromGlobal=document.getElementById("fromDate").value;toGlobal=document.getElementById("toDate").value;if(!fromGlobal||!toGlobal||fromGlobal>toGlobal){alert("Select valid date range");return;}const data=JSON.parse(localStorage.getItem("hourCalculatorData")||"{}");calculatedEntries=[];let totalMinutes=0;Object.keys(data).forEach(month=>{Object.keys(data[month]).forEach(date=>{if(date>=fromGlobal && date<=toGlobal){data[month][date].forEach(({inTime,outTime})=>{calculatedEntries.push({date,inTime,outTime});});}});});calculatedEntries.sort((a,b)=>a.date.localeCompare(b.date)||a.inTime.localeCompare(b.inTime));calculatedEntries.forEach(({inTime,outTime})=>{let inT=new Date(`2000-01-01T${inTime}`);let outT=new Date(`2000-01-01T${outTime}`);if(outT<=inT)outT.setDate(outT.getDate()+1);const diff=(outT-inT)/ 60000;if(diff>0)totalMinutes+=diff;});const hrs=Math.floor(totalMinutes / 60);const min=Math.round(totalMinutes % 60);document.getElementById("rangeResult").innerText=`Total:${hrs}h ${min}m`;document.getElementById("showTableBtn").style.display="inline-block";document.getElementById("rangeTableContainer").innerHTML="";}function displayRangeTable(){let title=fromGlobal+" to "+toGlobal;document.getElementById("modalTitle").innerText=title;csvContent="Date,In Time,Out Time,Duration(hrs)\n";const workHoursPerDay=parseFloat(document.getElementById("workHourInput")?.value||"8");const isSaturdayWeekend=document.getElementById("weekendSaturday")?.checked;const isSundayWeekend=document.getElementById("weekendSunday")?.checked;const weekendDays=[];if(isSaturdayWeekend)weekendDays.push(6);if(isSundayWeekend)weekendDays.push(0);const grouped={};calculatedEntries.forEach(entry=>{if(!grouped[entry.date])grouped[entry.date]=[];grouped[entry.date].push(entry);});let tableHTML=`<table><thead><tr><th>Date</th><th>In</th><th>Out</th><th>Duration</th></tr></thead><tbody>`;let totalWorkedMinutes=0;let workedDatesSet=new Set();for(const date in grouped){const rows=grouped[date];const rowspan=rows.length;const dayOfWeek=new Date(date).getDay();const isWeekend=weekendDays.includes(dayOfWeek);const rowStyle=isWeekend?`style="background-color:#f8d7da;color:#fff;" class="saturday"`:"";let dayHasWork=false;rows.forEach((entry,index)=>{let inT=new Date(`2000-01-01T${entry.inTime}`);let outT=new Date(`2000-01-01T${entry.outTime}`);if(outT<=inT)outT.setDate(outT.getDate()+1);const diff=(outT-inT)/ 60000;if(diff>0){totalWorkedMinutes+=diff;dayHasWork=true;const duration=`${(diff / 60).toFixed(2)}hrs`;csvContent+=`"${entry.date}","${entry.inTime}","${entry.outTime}","${duration}"\r\n`;tableHTML+=`<tr ${rowStyle}>`;if(index===0){tableHTML+=`<td rowspan="${rowspan}">${entry.date}</td>`;}tableHTML+=`<td>${entry.inTime}</td><td>${entry.outTime}</td><td>${duration}</td></tr>`;}});if(dayHasWork &&!isWeekend){workedDatesSet.add(date);}}const totalWorkedDays=workedDatesSet.size;const totalWorkedHours=(totalWorkedMinutes / 60).toFixed(2);const startDate=new Date(fromGlobal);const endDate=new Date(toGlobal);let expectedWorkingDays=0;for(let d=new Date(startDate);d<=endDate;d.setDate(d.getDate()+1)){if(!weekendDays.includes(d.getDay())){expectedWorkingDays++;}}const expectedHours=(expectedWorkingDays * workHoursPerDay).toFixed(2);tableHTML+=`<tr style="background:#e9ecef;font-weight:bold;"><td>Total Days Worked:${totalWorkedDays}</td><td>Expected Days:${expectedWorkingDays}</td><td>Expected Hours:${expectedHours}</td><td>Worked Hours:${totalWorkedHours}</td></tr></tbody></table>`;tableHTML+=`<div class="flex" id="downloadCsv"><button onclick="downloadCSV()" id="downloadCsv">‚¨áÔ∏è Download(.csv)</button><button class="secondary" onclick="printTable('${title}')">üñ®Ô∏è Print Table</button></div>`;document.getElementById("modalBody").innerHTML=tableHTML;}function printTable(title){const content=document.querySelector("#modalBody table").outerHTML;const printWindow=window.open('','','width=800,height=600');printWindow.document.write(`<html><head><title>${title}|Time table</title><style>html,body{margin:10px;padding:0;width:calc(100%-20px);height:auto;font-family:Arial,sans-serif;-webkit-print-color-adjust:exact;print-color-adjust:exact;}table{border-collapse:collapse;width:100%;box-sizing:border-box;}th,td{border:1px solid black;padding:8px;text-align:left;height:auto;}.saturday{background-color:#f8d7da;color:#fff;}</style></head><body><h1 style="text-align:center;margin-bottom:20px;">${title}</h1>${content}</body></html>`);printWindow.document.close();printWindow.focus();printWindow.print();printWindow.close();}function downloadCSV(){if(!csvContent){alert("Please calculate range first.");return;}const blob=new Blob(["\uFEFF"+csvContent],{type:"text/csv;charset=utf-8;"});const link=document.createElement("a");link.href=URL.createObjectURL(blob);link.download=`time_range_${fromGlobal}_to_${toGlobal}.csv`;document.body.appendChild(link);link.click();document.body.removeChild(link);}window.addEventListener("load",()=>{const keys=Object.keys(localStorage).filter((k)=>k.startsWith("ongoing_"));const ongoingDates=keys.map(k=>k.replace("ongoing_",""));const data=getStorage();const today=new Date().toISOString().slice(0,10);Object.keys(data).forEach(month=>{Object.keys(data[month]).forEach(date=>{const entries=data[month][date];const hasValidTime=entries.some(entry=>entry.inTime && entry.outTime);const hasOngoing=ongoingDates.includes(date);if(!hasValidTime && date!==today &&!hasOngoing){delete data[month][date];}});if(Object.keys(data[month]).length===0){delete data[month];}});saveStorage(data);renderAll();});